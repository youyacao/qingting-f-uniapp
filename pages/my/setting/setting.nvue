<template>
	<view>
		<view v-if="userInfo">
			<view class="avatar-box">
				<image class="avatar-image" mode="aspectFill" :src="userInfo.avatar" @click="onClickAvatar"></image>
			</view>
			<view style="padding: 20rpx;">
				<uni-list :border="false">
					<uni-list-item title="用户账号" :rightText="userInfo.username"></uni-list-item>
					<uni-list-item title="手机号码" :rightText="userInfo.phone"></uni-list-item>
					<uni-list-item title="我的邀请码" :rightText="userInfo.refcode"></uni-list-item>
					<uni-list-item title="用户昵称" :rightText="userInfo.nickname ? userInfo.nickname : '未设置'"
						:showArrow="true" to="nickname/nickname"></uni-list-item>
					<uni-list-item title="修改密码" :showArrow="true" to="password/password"></uni-list-item>
				</uni-list>
			</view>
			<view class="form-item-box" style="margin-top: 50rpx;">
				<view class="submit-button" hover-class="button-hover" @click="onLogout()">
					<text class="submit-button-text">退出登陆</text>
				</view>
			</view>
		</view>
		<text class="nodata-box" v-else>请先登陆</text>
	</view>
</template>

<script>
	import {
		mapGetters
	} from 'vuex'

	import {
		uploadImage
	} from "@/js_sdk/video.js"
	import {
		getUser,
		upateUser,
		logout
	} from "@/js_sdk/user.js"

	export default {
		data() {
			return {

			}
		},
		computed: {
			...mapGetters(['userInfo'])
		},
		onShow() {
			console.log(this.userInfo)
			this.getUserInfo()
		},
		methods: {
			getUserInfo() {
				getUser().then(res => {
					this.$store.dispatch("userInfo", res.data)
				}).catch(error => {
					console.log(error)
				})
			},
			onClickAvatar() {
				uni.chooseImage({
					count: 1,
					sourceType: ['album', 'camera'], //从相册选择
					success: (res) => {
						uni.showLoading({
							title: "正在上传图片"
						})
						uploadImage({
							filePath: res.tempFilePaths[0]
						}).then(_res => {
							uni.showLoading({
								title: "正在更新头像"
							})
							upateUser({
								avatar: _res.data.img_url
							}).then(_res_ => {
								uni.showToast({
									title: "更新成功"
								})
								this.getUserInfo()
							}).catch(error => {
								console.log(error)
							})
						}).catch(error => {
							console.log(error)
						})
					}
				});
			},
			onLogout() {
				logout().then(res => {
					this.$store.dispatch("userInfo", null)
					uni.setStorageSync("token", null)
					uni.setStorageSync("expires_in", null)
					uni.switchTab({
						url: "/pages/index/index"
					})
				})
			}
		}
	}
</script>

<style lang="scss" scoped>
	.nodata-box {
		padding: 20rpx;
		text-align: center;
		font-size: $uni-font-size-base;
		color: #F1F1F1;
	}

	.avatar-box {
		justify-content: center;
		align-items: center;
		padding: 20rpx;
	}

	.avatar-image {
		width: 200rpx;
		height: 200rpx;
		border-radius: 20rpx;
	}

	.form-item-box {
		padding: 20rpx;
	}

	.submit-button {
		border-radius: 10rpx;
		padding: 20rpx;
		background-color: #DD524D;
	}

	.submit-button-text {
		font-size: $uni-font-size-base;
		color: #F1F1F1;
		text-align: center;
	}
</style>
